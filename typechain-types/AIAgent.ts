/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface AIAgentInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getMessage"
      | "getResponse"
      | "message"
      | "response"
      | "sendMessage"
      | "setResponse"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "MessageSent" | "ResponseUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getMessage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getResponse",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "message", values?: undefined): string;
  encodeFunctionData(functionFragment: "response", values?: undefined): string;
  encodeFunctionData(functionFragment: "sendMessage", values: [string]): string;
  encodeFunctionData(functionFragment: "setResponse", values: [string]): string;

  decodeFunctionResult(functionFragment: "getMessage", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getResponse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "message", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "response", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sendMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setResponse",
    data: BytesLike
  ): Result;
}

export namespace MessageSentEvent {
  export type InputTuple = [newMessage: string];
  export type OutputTuple = [newMessage: string];
  export interface OutputObject {
    newMessage: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ResponseUpdatedEvent {
  export type InputTuple = [newResponse: string];
  export type OutputTuple = [newResponse: string];
  export interface OutputObject {
    newResponse: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AIAgent extends BaseContract {
  connect(runner?: ContractRunner | null): AIAgent;
  waitForDeployment(): Promise<this>;

  interface: AIAgentInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getMessage: TypedContractMethod<[], [string], "view">;

  getResponse: TypedContractMethod<[], [string], "view">;

  message: TypedContractMethod<[], [string], "view">;

  response: TypedContractMethod<[], [string], "view">;

  sendMessage: TypedContractMethod<[_message: string], [void], "nonpayable">;

  setResponse: TypedContractMethod<[_response: string], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getMessage"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getResponse"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "message"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "response"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "sendMessage"
  ): TypedContractMethod<[_message: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setResponse"
  ): TypedContractMethod<[_response: string], [void], "nonpayable">;

  getEvent(
    key: "MessageSent"
  ): TypedContractEvent<
    MessageSentEvent.InputTuple,
    MessageSentEvent.OutputTuple,
    MessageSentEvent.OutputObject
  >;
  getEvent(
    key: "ResponseUpdated"
  ): TypedContractEvent<
    ResponseUpdatedEvent.InputTuple,
    ResponseUpdatedEvent.OutputTuple,
    ResponseUpdatedEvent.OutputObject
  >;

  filters: {
    "MessageSent(string)": TypedContractEvent<
      MessageSentEvent.InputTuple,
      MessageSentEvent.OutputTuple,
      MessageSentEvent.OutputObject
    >;
    MessageSent: TypedContractEvent<
      MessageSentEvent.InputTuple,
      MessageSentEvent.OutputTuple,
      MessageSentEvent.OutputObject
    >;

    "ResponseUpdated(string)": TypedContractEvent<
      ResponseUpdatedEvent.InputTuple,
      ResponseUpdatedEvent.OutputTuple,
      ResponseUpdatedEvent.OutputObject
    >;
    ResponseUpdated: TypedContractEvent<
      ResponseUpdatedEvent.InputTuple,
      ResponseUpdatedEvent.OutputTuple,
      ResponseUpdatedEvent.OutputObject
    >;
  };
}
